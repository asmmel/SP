import random
import time
import uiautomator2 as u2
import telebot
import pyautogui as pg
import json
from datetime import datetime
import os
import socket
import re
from typing import List, Dict, Optional, Tuple, Set
from dataclasses import dataclass, field
from contextlib import contextmanager
import asyncio
import logging
from concurrent.futures import ThreadPoolExecutor
from threading import Lock
from spotify_app.utils.config import Config

logger = logging.getLogger(__name__)

@dataclass
class DeviceState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    device_id: str = ""  # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    played_songs: Set[str] = field(default_factory=set)
    lock: Lock = field(default_factory=Lock)
    current_file: int = 1
    total_songs: int = 0
    songs_played: int = 0
    track_plays: Dict[str, int] = field(default_factory=dict)
    config: Optional[Config] = None

    def __post_init__(self):
        self._load_track_plays()
    
    def _load_track_plays(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            cache_file = 'data/spotify_track_plays.json'  # –∏–ª–∏ apple_track_plays.json
            if os.path.exists(cache_file):
                with open(cache_file, 'r') as f:
                    all_devices_data = json.load(f)
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                    self.track_plays = all_devices_data.get(self.device_id, {})
            else:
                self.track_plays = {}
        except Exception as e:
            logger.error(f"Error loading track plays for device {self.device_id}: {str(e)}")
            self.track_plays = {}
    
    def _save_track_plays(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            os.makedirs('data', exist_ok=True)
            cache_file = 'data/spotify_track_plays.json'  # –∏–ª–∏ apple_track_plays.json
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
            all_devices_data = {}
            if os.path.exists(cache_file):
                with open(cache_file, 'r') as f:
                    all_devices_data = json.load(f)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            all_devices_data[self.device_id] = self.track_plays
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            temp_file = f"{cache_file}.tmp"
            with open(temp_file, 'w') as f:
                json.dump(all_devices_data, f, indent=4)
            os.replace(temp_file, cache_file)
            
        except Exception as e:
            logger.error(f"Error saving track plays for device {self.device_id}: {str(e)}")

    def can_play_track(self, track: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if not self.config:
            return True
        current_plays = self.track_plays.get(track, 0)
        can_play = current_plays < self.config.max_plays_per_track
        if not can_play:
            logger.debug(f"Device {self.device_id}: Track '{track}' reached max plays ({current_plays}/{self.config.max_plays_per_track})")
        return can_play

class SpotifyAutomation:
    def __init__(self, config: Config):
        self.config = config
        self.bot = telebot.TeleBot(config.token)
        self.device_states = {}
        self.state_lock = Lock()
        self.devicelist = []
        self.on_device_progress = None
        self.on_status_update = None
        self.running = True  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
         # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å—Ä–∞–∑—É
        self.initialize_devices()
        self._load_cache()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.tracks_not_found = []  # –ù–æ–≤–æ–µ –ø–æ–ª–µ

    # –ò –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
    def save_tracks_not_found(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤"""
        os.makedirs('data', exist_ok=True)
        with open("data/spotify_tracks_not_found.json", "w") as f:
            json.dump(self.tracks_not_found, f, indent=4)

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"""
        try:
            logger.info("Stopping Spotify automation...")
            self.running = False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._save_cache()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä—É—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            try:
                message = (
                    "üõë Spotify –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n\n"
                    "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º:\n"
                )
                
                for device, state in self.device_states.items():
                    progress = f"{state.songs_played}/{state.total_songs}"
                    percentage = (state.songs_played / state.total_songs * 100) if state.total_songs > 0 else 0
                    message += f"üì± {device}: {progress} ({percentage:.1f}%)\n"
                
                self.bot.send_message(self.config.chat_id, message)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats_file = f"data/{self.config.service_type}_track_plays.json"
                if os.path.exists(stats_file):
                    with open(stats_file, 'rb') as stats:
                        self.bot.send_document(
                            self.config.chat_id,
                            stats,
                            caption="üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
                        )
                        
                # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
                if hasattr(self, 'tracks_not_found') and self.tracks_not_found:
                    self.save_tracks_not_found()
                    with open('data/spotify_tracks_not_found.json', 'rb') as file:
                        self.bot.send_document(
                            self.config.chat_id, 
                            file,
                            caption="‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
                        )
                        
            except Exception as e:
                logger.error(f"Error sending stop notification: {str(e)}")
                logger.exception("Full error details:")
                
            logger.info("Spotify automation stopped successfully")
            
        except Exception as e:
            logger.error(f"Error during stop process: {str(e)}")
            logger.exception("Full error details:")

    def get_device_state(self, device: str) -> DeviceState:
        with self.state_lock:
            if device not in self.device_states:
                state = DeviceState(device_id=device)  # –ü–µ—Ä–µ–¥–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                state.config = self.config
                self.device_states[device] = state
            return self.device_states[device]

    def _load_cache(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –∫—ç—à–∞"""
        try:
            cache_file = "data/spotify_cache.json"
            if os.path.exists(cache_file):
                with open(cache_file, "r") as f:
                    cached_data = json.load(f)
                    for device, songs in cached_data.items():
                        state = self.get_device_state(device)
                        state.played_songs.update(songs.get("lines", []))
                        state.current_file = songs.get("count", 1)
                        state.songs_played = songs.get("songs_played", 0)
                        state.total_songs = songs.get("total_songs", 0)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        logger.info(f"Loaded cache for device {device}: {state.songs_played}/{state.total_songs}")
                        
                        # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞, –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
                        if self.on_device_progress:
                            self.on_device_progress(device, state.songs_played, state.total_songs)
                            
                logger.info(f"Cache loaded successfully from {cache_file}")
            else:
                logger.info("No cache file found, starting fresh")
        except Exception as e:
            logger.error(f"Error loading cache: {str(e)}")


    def _save_cache(self, is_except: bool = False):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞"""
        try:
            os.makedirs('data', exist_ok=True)
            filename = "data/spotify_cache_except.json" if is_except else "data/spotify_cache.json"
            cache_data = {}
            
            for device, state in self.device_states.items():
                cache_data[device] = {
                    "lines": list(state.played_songs),
                    "count": state.current_file,
                    "songs_played": state.songs_played,
                    "total_songs": state.total_songs
                }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = f"{filename}.tmp"
            with open(temp_file, "w") as f:
                json.dump(cache_data, f, indent=4)
            os.replace(temp_file, filename)
            
            logger.info(f"Cache saved successfully to {filename}")
        except Exception as e:
            logger.error(f"Error saving cache: {str(e)}")

    @contextmanager
    def error_handling(self, device, screenshot: bool = True):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        try:
            yield
        except u2.exceptions.JsonRpcError as jre:
            self._handle_error("JsonRpcError", jre, device, screenshot)
        except u2.exceptions.XPathElementNotFoundError as xe:
            self._handle_error("XPathElementNotFoundError", xe, device, screenshot)
        except u2.exceptions.UiAutomationNotConnectedError as ue:
            self._handle_error("UiAutomationNotConnectedError", ue, device, screenshot)
        except Exception as ex:
            self._handle_error("GeneralException", ex, device, screenshot)

    def _handle_error(self, error_type: str, error: Exception, device, screenshot: bool):
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"{error_type}: {str(error)}")
        self._save_error_log(error_type, error)
        self.process_exception(device, screenshot)

    def process_exception(self, device_addr: str, screenshot: bool = True):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        self._save_cache(is_except=True)
        logger.info('RESTART SPOTIFY')
        try:
            d = u2.connect(device_addr)
            self.restart_spotify(d)
            if screenshot:
                screenshot_path = os.path.join('data', 'screenshots', f'error_{datetime.now().strftime("%Y%m%d_%H%M%S")}.png')
                os.makedirs(os.path.dirname(screenshot_path), exist_ok=True)
                pg.screenshot(screenshot_path)
                with open(screenshot_path, 'rb') as img:    
                    self.bot.send_photo(self.config.chat_id, img, caption='Server Spotify Except')
        except Exception as e:
            logger.error(f"Failed to process exception for device {device_addr}: {str(e)}")
            logger.exception("Full error details:")

    def _save_error_log(self, error_type: str, error: Exception):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥"""
        os.makedirs('data/logs', exist_ok=True)
        with open("data/logs/errors_spotify.log", "a") as error_file:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            error_file.write(f"[{timestamp}] {error_type}: {str(error)}\n")

    def check_ports(self) -> List[int]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤"""
        open_ports = []
        for port in range(self.config.start_port, self.config.end_port, self.config.port_step):
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(1)
                if s.connect_ex((self.config.bluestacks_ip, port)) == 0:
                    open_ports.append(port)
        return open_ports

    def initialize_devices(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        if self.config.use_adb_device_detection:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ADB –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            from utils.adb_chek import ADBChecker
            adb_checker = ADBChecker()
            
            if not adb_checker.initialize_environment():
                logger.error("Failed to initialize ADB environment")
                # Fallback –Ω–∞ –º–µ—Ç–æ–¥ –ø–æ—Ä—Ç–æ–≤
                self._initialize_devices_by_ports()
                return
                
            device_ids = adb_checker.get_connected_devices()
            if device_ids:
                logger.info(f"Found {len(device_ids)} devices via ADB: {device_ids}")
                self.devicelist = device_ids
            else:
                logger.warning("No devices found via ADB, falling back to IP:port method")
                self._initialize_devices_by_ports()
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ IP:–ø–æ—Ä—Ç
            self._initialize_devices_by_ports()

    def _initialize_devices_by_ports(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ –ø–æ—Ä—Ç–∞–º (–∏—Å—Ö–æ–¥–Ω—ã–π –º–µ—Ç–æ–¥)"""
        open_ports = self.check_ports()
        if open_ports:
            logger.info(f"–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã –Ω–∞ {self.config.bluestacks_ip}: {open_ports}")
            self.devicelist = [f'{self.config.bluestacks_ip}:{port}' for port in open_ports]
        else:
            logger.warning(f"–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤ –Ω–∞ {self.config.bluestacks_ip}")

    def split_database(self, file_path: str):
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —á–∞—Å—Ç–∏"""
        logger.info(f"Splitting database from {file_path}")
        os.makedirs('data', exist_ok=True)
        small_file_number = 1
        try:
            with open(file_path, 'r') as big_file:
                small_file = None
                for lineno, line in enumerate(big_file):
                    if lineno % self.config.lines_per_file == 0:
                        if small_file:
                            small_file.close()
                        small_file_name = f"data/database_part_spotify_{small_file_number}.txt"
                        small_file = open(small_file_name, 'w')
                        small_file_number += 1
                        logger.debug(f"Created new database part: {small_file_name}")
                    small_file.write(line)
                if small_file:
                    small_file.close()
            logger.info(f"Database split completed. Created {small_file_number-1} parts")
        except Exception as e:
            logger.error(f"Error splitting database: {str(e)}")
            raise

    def reset_play_statistics(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            for device, state in self.device_states.items():
                state.track_plays.clear()
                state._save_track_plays()
                
            # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_files = {
                'spotify': 'data/spotify_track_plays.json'
            }
            
            service_type = self.config.service_type
            stats_file = stats_files.get(service_type)
            
            if stats_file and os.path.exists(stats_file):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Ñ–∞–π–ª
                with open(stats_file, 'w') as f:
                    json.dump({}, f)
                
                logger.info(f"Play statistics reset for {service_type}")
                return True
        except Exception as e:
            logger.error(f"Error resetting play statistics: {str(e)}")
            return False

    def get_name(self, device: str) -> Optional[List[str]]:
        state = self.get_device_state(device)
        
        with state.lock:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ—â–µ —Ç—Ä–µ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å
            total_available = 0
            prefix = "spotify"  # –î–ª—è Spotify –Ω–µ –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º spotify
            for i in range(1, 1000):
                file_path = f"data/database_part_{prefix}_{i}.txt"
                if not os.path.exists(file_path):
                    break
                
                with open(file_path) as f:
                    for line in f:
                        track = line.strip()
                        if track and state.can_play_track(track):
                            total_available += 1
            
            if total_available == 0:
                logger.info(f"Device {device} has no more tracks available due to play limits")
                self.bot.send_message(
                    self.config.chat_id, 
                    f"Device {device} has completed playing all available tracks (reached max plays limit)"
                )
                return None
                
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–∫–∞
            prefix = "spotify"
            while True:
                file_path = f"data/database_part_{prefix}_{state.current_file}.txt"
                if not os.path.exists(file_path):
                    if state.current_file == 1 and state.songs_played > 0:
                        logger.info(f"Device {device} has played all songs in this cycle")
                        return None
                    state.current_file = 1
                    state.played_songs.clear()
                    continue
                
                with open(file_path) as f:
                    available_songs = []
                    for line in f:
                        track = line.strip()
                        if (track and 
                            track not in state.played_songs and 
                            state.can_play_track(track)):
                            available_songs.append(track)
                
                if not available_songs:
                    state.current_file += 1
                    continue
                    
                song = random.choice(available_songs)
                state.played_songs.add(song)
                state.track_plays[song] = state.track_plays.get(song, 0) + 1
                state._save_track_plays()
                return [song]

    def restart_spotify(self, d):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Spotify —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Spotify
            current_app = d.app_current()
            logger.debug(f"Current app: {current_app}")
            
            if current_app["package"] != "com.spotify.music":
                logger.info("Spotify not in foreground, starting app")
                d.app_start("com.spotify.music", ".MainActivity")
                time.sleep(5)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –¥–æ–º–∞—à–Ω–∏–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            time.sleep(2)
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ home_tab
                d(resourceId="com.spotify.music:id/home_tab").click()
                time.sleep(2)
            except u2.exceptions.JsonRpcError as e:
                logger.warning(f"Home tab not found: {str(e)}, trying alternative approach")
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ home_tab, –ø—Ä–æ–±—É–µ–º —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∏—Å–∫—É
                pass
                
            search = d(resourceId="com.spotify.music:id/search_tab")
            time.sleep(1)
            
            if not search.exists:
                logger.warning("Search tab not found, attempting to restart app")
                d.app_start("com.spotify.music", ".MainActivity")
                time.sleep(5)
                search = d(resourceId="com.spotify.music:id/search_tab")
            
            search.click()
            search.click()
            time.sleep(1)
            
            clear_button = d(resourceId="com.spotify.music:id/clear_query_button")
            if clear_button.exists:
                clear_button.click()
            
            return True
            
        except Exception as e:
            logger.error(f"Failed to restart Spotify: {str(e)}")
            return False
    
    async def restart_proxy_full(self, device: u2.Device, device_addr: str) -> bool:
        """–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏ —Å –æ—á–∏—Å—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info(f"Performing full proxy restart for {device_addr}")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            apps_to_stop = ['com.getsurfboard', 'com.spotify.music']
            for app in apps_to_stop:
                device.app_stop(app)
                await asyncio.sleep(1)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Surfboard
            device.app_start('com.getsurfboard')
            await asyncio.sleep(3)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å VPN
            if not await self.check_proxy(device, device_addr):
                logger.error(f"Failed to activate VPN after full restart on {device_addr}")
                return False
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            device.app_start('com.spotify.music')
            await asyncio.sleep(3)
            
            return True
            
        except Exception as e:
            logger.error(f"Error during full proxy restart on {device_addr}: {str(e)}")
            return False

    async def process_device(self, device: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        state = self.get_device_state(device)
        logger.info(f"Starting device {device} processing. Total songs: {state.total_songs}")
        
        last_proxy_check = time.time()
        proxy_check_interval = 3600  # 1 —á–∞—Å
        
        while state.songs_played < state.total_songs and self.running:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏
            current_time = time.time()
            if current_time - last_proxy_check >= proxy_check_interval:
                try:
                    d = u2.connect(device)
                    proxy_status = await self.check_proxy(d, device)
                    if not proxy_status:
                        logger.warning(f"Proxy check failed on {device}, attempting full restart")
                        if not await self.restart_proxy_full(d, device):
                            logger.error(f"Failed to restore proxy functionality on {device}")
                    last_proxy_check = current_time
                except Exception as e:
                    logger.error(f"Error during proxy check: {str(e)}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
            retries = self.config.retry_attempts
            while retries > 0 and self.running:
                try:
                    d = u2.connect(device)
                    result = self.get_name(device)
                    if not result:
                        logger.info(f"No more available tracks for device {device}")
                        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –µ—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤
                    
                    name_artist = result[0]
                    logger.info(f"Device {device}: Playing song {name_artist}")
                    await self.search_and_play(d, name_artist)
                    state.songs_played += 1
                    
                    if self.on_device_progress:
                        self.on_device_progress(device, state.songs_played, state.total_songs)
                    
                    if state.songs_played % 10 == 0:
                        self._periodic_cache_save()
                    
                    logger.info(f"Device {device} progress: {state.songs_played}/{state.total_songs}")
                    break  # –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏, –≤—ã—Ö–æ–¥–∏–º –∏–∑ retries
                
                except Exception as e:
                    logger.error(f"Error on device {device}, attempt {self.config.retry_attempts - retries + 1}: {str(e)}")
                    retries -= 1
                    if retries == 0:
                        self._handle_error("MaxRetriesExceeded", e, device, True)
                    await asyncio.sleep(5)
            
            if not self.running:
                return
            
            await asyncio.sleep(2)

    def _handle_app_not_responding(self, d):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞ –æ –Ω–µ–æ—Ç–≤–µ—á–∞—é—â–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏–∞–ª–æ–≥–∞
            anr_texts = [
                "Spotify isn't responding",
                "isn't responding",
                "Close app"
            ]
            
            for text in anr_texts:
                if d(text=text).exists:
                    logger.info("Found app not responding dialog")
                    # –ò—â–µ–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É Close app
                    close_button = d(text="Close app")
                    if close_button.exists:
                        close_button.click()
                        time.sleep(2)
                        return True
                        
            return False
            
        except Exception as e:
            logger.error(f"Error handling ANR dialog: {str(e)}")
            return False

    async def search_and_play(self, d, name_artist: str):
        """–ü–æ–∏—Å–∫ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞"""
        if not name_artist.strip():
            logger.warning('Artist Name = NONE')
            return

        d.implicitly_wait(10.0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π
        if self._handle_app_not_responding(d):
            logger.info("Restarting after ANR")
            if not self.restart_spotify(d):
                return
        
        if not self.is_app_running(d, "com.spotify.music"):
            logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Spotify...")
            if not self.restart_spotify(d):
                return

        # –ü–æ–∏—Å–∫ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        d(resourceId="com.spotify.music:id/query").click()
        time.sleep(1)
        d.send_keys(name_artist)
        time.sleep(2)

        artist_name = name_artist.split()[-1]
        search_text = f"Song ‚Ä¢ {artist_name}"
        logger.info(f"–ü–æ–∏—Å–∫: {search_text}")

        song_element = d(textMatches=f"Song ‚Ä¢ .*{re.escape(artist_name)}.*")
        if song_element.exists():
            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø–µ—Å–Ω—è: {song_element.get_text()}")
            song_element.click()
        else:
            logger.info(f"–ü–µ—Å–Ω—è —Å '{artist_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
            first_song = d(textMatches="Song ‚Ä¢ .*", instance=0)
            if first_song.exists:
                logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø–µ—Å–Ω—è: {first_song.get_text()}")
                first_song.click()
            else:
                logger.info(f"–ü–µ—Å–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {name_artist}")
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
                self.tracks_not_found.append(name_artist)
                d(resourceId="com.spotify.music:id/clear_query_button").click()
                return

        time.sleep(1.5)
        d(resourceId="com.spotify.music:id/clear_query_button").click()
        time.sleep(1)

    async def play_circles(self, circles: int):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–æ–≤ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        self.running = True
        logger.info(f'Starting playback process')
        self.split_database(self.config.database_path)
        
        timestamp_start = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        logger.info(f"Start {self.config.service_type.capitalize()}: [{timestamp_start}]")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        total_available_tracks = 0
        tracks_checked = set()  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç—Ä–µ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏
        prefix = "spotify"  # –î–ª—è Spotify –Ω–µ –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞, –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º spotify

        for i in range(1, 1000):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
            file_path = f"data/database_part_{prefix}_{i}.txt"
            logger.debug(f"Checking file: {file_path}, exists: {os.path.exists(file_path)}")
            
            if not os.path.exists(file_path):
                break
            
            with open(file_path) as f:
                for line in f:
                    track = line.strip()
                    if not track or track in tracks_checked:
                        continue
                        
                    tracks_checked.add(track)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø—Ä–æ–∏–≥—Ä–∞—Ç—å —ç—Ç–æ—Ç —Ç—Ä–µ–∫
                    for device in self.devicelist:
                        state = self.get_device_state(device)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        can_play = state.can_play_track(track)
                        current_plays = state.track_plays.get(track, 0)
                        logger.debug(f"Track: {track}, Device: {device}, CanPlay: {can_play}, CurrentPlays: {current_plays}, MaxPlays: {state.config.max_plays_per_track}")
                        
                        if can_play:
                            total_available_tracks += 1
                            break  # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–≥—Ä–∞—Ç—å —Ç—Ä–µ–∫, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º
        
        if total_available_tracks == 0:
            logger.info("All tracks have reached maximum plays limit, automation complete")
            await self._send_completion_report()
            self.running = False
            return
        
        logger.info(f"Found {total_available_tracks} tracks available for playing within limits")
        
        tasks = [self.process_device(device) for device in self.devicelist]
        try:
            await asyncio.gather(*tasks)
        except asyncio.CancelledError:
            logger.info("Tasks cancelled")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        if self.running:
            all_completed = True
            for device in self.devicelist:
                state = self.get_device_state(device)
                if state.songs_played < state.total_songs:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—á–∏–Ω–∞ –Ω–µ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤
                    available_for_device = 0
                    prefix = "spotify"
                    for i in range(1, 1000):
                        file_path = f"data/database_part_{prefix}_{i}.txt"
                        if not os.path.exists(file_path):
                            break
                        
                        with open(file_path) as f:
                            for line in f:
                                track = line.strip()
                                if track and state.can_play_track(track):
                                    available_for_device += 1
                    
                    if available_for_device > 0:
                        all_completed = False
                        logger.warning(f"Device {device} incomplete: {state.songs_played}/{state.total_songs}")
                    else:
                        logger.info(f"Device {device} completed all available tracks within limits")
            
            if all_completed:
                logger.info("All devices have completed playing all available songs!")
                await self.finish_play()  # –í—ã–∑–æ–≤ finish_play –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            else:
                logger.warning("Not all devices completed their playback")

    def _periodic_cache_save(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—ç—à–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–π"""
        try:
            self._save_cache()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            for device, state in self.device_states.items():
                state._save_track_plays()
                # –û–±–Ω–æ–≤–ª—è–µ–º UI —á–µ—Ä–µ–∑ callback –µ—Å–ª–∏ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                if self.on_device_progress:
                    self.on_device_progress(device, state.songs_played, state.total_songs)
                    logger.debug(f"Updated UI progress for device {device}: {state.songs_played}/{state.total_songs}")
        except Exception as e:
            logger.error(f"Error in periodic cache save: {str(e)}")

    async def finish_play(self):
        try:
            logger.info('Finishing playback')
            self._save_cache()
            await self._send_completion_report()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
            if self.check_play_limits_reached():
                logger.info("Maximum plays reached for all tracks, stopping automation")
                self.running = False
                return
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
            await self._reset_state_for_new_cycle()
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
            logger.info(f"Sleeping for {self.config.delay_between_circles} seconds before next cycle")
            await asyncio.sleep(self.config.delay_between_circles)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if self.running:
                # –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ main, –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∫—Ä—É–≥ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è
                await self.play_circles(1)
                    
        except Exception as e:
            logger.error(f"Error in finish_play: {str(e)}")

    async def _reset_state_for_new_cycle(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        try:
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            for device in self.devicelist:
                state = self.get_device_state(device)
                state.played_songs.clear()  # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
                state.current_file = 1      # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
                state.songs_played = 0      # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                # –ù–ï –æ—á–∏—â–∞–µ–º track_plays - —Ç–∞–º —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ª–∏–º–∏—Ç–æ–≤!
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            os.makedirs('data', exist_ok=True)
            cache_file = f"data/{self.config.service_type}_cache.json"
            with open(cache_file, 'w') as f:
                json.dump({}, f)
                
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._load_cache()
            
            logger.info('State reset for new cycle')
            return True
        except Exception as e:
            logger.error(f"Error resetting state: {str(e)}")
            return False

    @staticmethod
    def is_app_running(d, package_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        current_app = d.app_current()
        return current_app["package"] == package_name if current_app else False
    
    async def check_proxy(self, device: u2.Device, device_addr: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –∏ –µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        try:
            logger.info(f"Checking proxy status for device {device_addr}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            current_app = device.app_current()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Surfboard
            device.app_start('com.getsurfboard')
            await asyncio.sleep(3)  # –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
            
            retry_attempts = 3
            result = False
            
            while retry_attempts > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å VPN
                if device(description="Stop VPN").exists:
                    logger.info(f"VPN is active on {device_addr}")
                    result = True
                    break
                elif device(description="Start VPN").exists:
                    logger.info(f"Starting VPN on {device_addr}")
                    device(description="Start VPN").click()
                    await asyncio.sleep(3)  # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    if device(description="Stop VPN").exists:
                        logger.info(f"VPN successfully started on {device_addr}")
                        result = True
                        break
                    else:
                        logger.warning(f"Failed to start VPN, retrying... ({retry_attempts} attempts left)")
                        retry_attempts -= 1
                else:
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ Start/Stop VPN
                    logger.error(f"VPN buttons not found on {device_addr}")
                    # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                    device.app_stop('com.getsurfboard')
                    await asyncio.sleep(1)
                    device.app_start('com.getsurfboard')
                    await asyncio.sleep(3)
                    retry_attempts -= 1
                    
                if retry_attempts == 0:
                    logger.error(f"Failed to start VPN after all attempts on {device_addr}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
            if current_app:
                device.app_start(current_app["package"])
                await asyncio.sleep(2)
                
            return result
                
        except Exception as e:
            logger.error(f"Error checking proxy on {device_addr}: {str(e)}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
            if current_app:
                try:
                    device.app_start(current_app["package"])
                except:
                    pass
            return False

    def check_play_limits_reached(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        try:
            stats_file = f"data/{self.config.service_type}_track_plays.json"
            if not os.path.exists(stats_file):
                return False
                
            with open(stats_file, 'r') as f:
                all_devices_data = json.load(f)
                
            if not all_devices_data:
                return False

            total_tracks = 0
            max_plays_reached = 0
            
            for device_id, device_data in all_devices_data.items():
                if not isinstance(device_data, dict):
                    continue
                    
                for track, plays in device_data.items():
                    total_tracks += 1
                    if plays >= self.config.max_plays_per_track:
                        max_plays_reached += 1
                        
            if total_tracks > 0 and max_plays_reached == total_tracks:
                logger.info(f"All tracks ({total_tracks}) have reached maximum plays limit ({self.config.max_plays_per_track})")
                message = (
                    f"üéµ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π!\n\n"
                    f"–í—Å–µ —Ç—Ä–µ–∫–∏ ({total_tracks}) –±—ã–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–Ω—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ "
                    f"({self.config.max_plays_per_track}).\n"
                    f"–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
                )
                self.bot.send_message(self.config.chat_id, message)
                
                with open(stats_file, 'rb') as stats:
                    self.bot.send_document(
                        self.config.chat_id, 
                        stats,
                        caption="üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π"
                    )
                return True
                
            return False
                
        except Exception as e:
            logger.error(f"Error checking play limits: {str(e)}")
            return False
        
    async def _send_completion_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            screenshot_path = os.path.join('data', 'screenshots', f'completion_{datetime.now().strftime("%Y%m%d_%H%M%S")}.png')
            os.makedirs(os.path.dirname(screenshot_path), exist_ok=True)
            pg.screenshot(screenshot_path)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            with open(screenshot_path, 'rb') as img:
                self.bot.send_photo(self.config.chat_id, img, caption='Server Spotify Good')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫—ç—à–∞
            with open('data/spotify_cache.json', 'rb') as file:
                self.bot.send_document(self.config.chat_id, file)
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
            if self.tracks_not_found:
                self.save_tracks_not_found()
                with open('data/spotify_tracks_not_found.json', 'rb') as file:
                    self.bot.send_document(
                        self.config.chat_id, 
                        file,
                        caption="‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
                    )
                    
        except Exception as e:
            logger.error(f"Failed to send completion report: {str(e)}")
            logger.exception("Full exception details:")

    async def main(self):
        try:
            logger.info(f"Config max_plays_per_track: {self.config.max_plays_per_track}")
            if not os.path.exists(self.config.database_path):
                logger.error("Database file not found!")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
            if self.check_play_limits_reached():
                logger.info("Maximum plays reached for all tracks")
                await self._send_completion_report()
                self.running = False
                return

            self.initialize_devices()
            if not self.devicelist:
                logger.error("No devices found!")
                return

            total_songs = sum(1 for line in open(self.config.database_path) if line.strip())
            
            for device in self.devicelist:
                state = self.get_device_state(device)
                state.total_songs = total_songs

            logger.info(f"Starting automation with {len(self.devicelist)} devices and {total_songs} songs")
            
            await self.play_circles(1)
            
        except Exception as e:
            logger.error(f"Error in main: {str(e)}")
            self._save_cache(is_except=True)

def run():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        config = Config()
        automation = SpotifyAutomation(config)
        asyncio.run(automation.main())
    except Exception as e:
        logger.error(f"Fatal error: {str(e)}")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∑–¥–µ—Å—å

if __name__ == "__main__":
    run()